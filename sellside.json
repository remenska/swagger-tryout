{
  "openapi": "3.0.0",
  "info": {
    "description": "This document describes the iCAS Sellside API to place ads on iCAS.",
    "version": "0.119",
    "title": "Admarkt Sellside API"
  },
  "servers": [
    {
      "url": "http://www.mp.dev/api/sellside",
      "description": "Local environment [MP]"
    },
    {
      "url": "https://internet.mp.qa.icas.io",
      "description": "QA environment [MP]"
    },
    {
      "url": "https://admarkt.demo.qa-mp.so/api/sellside",
      "description": "Pre-prod (demo) environment [MP]"
    },
    {
      "url": "https://admarkt.marktplaats.nl/api/sellside",
      "description": "Production environment [MP]"
    }
  ],
  "tags": [
    {
      "name": "Ads"
    },
    {
      "name": "Campaigns"
    },
    {
      "name": "Categories"
    },
    {
      "name": "Reporting"
    }
  ],
  "paths": {
    "/ad/{adId}": {
      "get": {
        "tags": [
          "Ads"
        ],
        "summary": "Get ad by ID",
        "description": "Version 3 works just like v2, except the response body contains an additional field statusReasons. This field is currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.",
        "operationId": "getAdById",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "ID of ad to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1235
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Oauth-Scope": {
                "description": "Oauth scopes that are available with the supplied token",
                "schema": {
                  "type": "string",
                  "example": "api_ro api_rw"
                }
              },
              "Oauth-Scope-Required": {
                "description": "The required permission for this particular call",
                "schema": {
                  "type": "string",
                  "example": "get_ad"
                }
              }
            },
            "content": {
              "application/sellside.ad-v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/AdV2"
                }
              },
              "application/sellside.ad-v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/AdV3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1009,
                    "text": "missing token",
                    "msg": "Authorization header is missing or in the wrong format"
                  }
                ]
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotSupportedError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1004,
                    "text": "not found",
                    "msg": "The entity was not found"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1000,
                    "text": "internal error",
                    "msg": "The server encountered an error"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "oAuth2ClientCredentials": [
              "console_ro",
              "api_ro"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Ads"
        ],
        "summary": "Updates the ad with the given ID",
        "description": "Version 3 works just like v2, except the response body contains an additional field statusReasons. This field is currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.",
        "operationId": "updateAdById",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "ID of ad to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1235
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/sellside.ad-v3+json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdV2"
              }
            },
            "application/sellside.ad-v2+json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Oauth-Scope": {
                "description": "Oauth scopes that are available with the supplied token",
                "schema": {
                  "type": "string",
                  "example": "api_ro api_rw"
                }
              },
              "Oauth-Scope-Required": {
                "description": "The required permission for this particular call",
                "schema": {
                  "type": "string",
                  "example": "put_ad"
                }
              }
            },
            "content": {
              "application/sellside.ad-v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/AdV2"
                }
              },
              "application/sellside.ad-v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/AdV3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1009,
                    "text": "missing token",
                    "msg": "Authorization header is missing or in the wrong format"
                  }
                ]
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotSupportedError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1004,
                    "text": "not found",
                    "msg": "The entity was not found"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1000,
                    "text": "internal error",
                    "msg": "The server encountered an error"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "oAuth2ClientCredentials": [
              "console_rw",
              "api_rw"
            ]
          }
        ]
      }
    },
    "/ad": {
      "get": {
        "tags": [
          "Ads"
        ],
        "summary": "Get a list of ads with filter criteria",
        "description": "Returns a list of ads for the current user and the total size of the result set matching the filter criteria.",
        "operationId": "getListOfAdsWithFilters",
        "parameters": [
          {
            "name": "titleKeywords",
            "in": "query",
            "description": "Case-insensitive filter for a keyword in the title; will include only ads which contain the given keyword in their title.",
            "schema": {
              "type": "string",
              "example": "fiets"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters the result set by the ad status. Should be a comma separated list of possible statuses ",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AdStatus"
                  }
                ]
              }
            },
            "example": [
              "ACTIVE"
            ]
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Orders the result set by the given field. Default value is DATE_CREATED.",
            "schema": {
              "$ref": "#/components/schemas/OrderBy"
            },
            "example": "DATE_CREATED"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Oauth-Scope": {
                "description": "Oauth scopes that are available with the supplied token",
                "schema": {
                  "type": "string",
                  "example": "api_ro api_rw"
                }
              },
              "Oauth-Scope-Required": {
                "description": "The required permission for this particular call",
                "schema": {
                  "type": "string",
                  "example": "get_ads"
                }
              }
            },
            "content": {
              "application/sellside.ad.list-v4+json": {
                "schema": {
                  "$ref": "#/components/schemas/AdList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1009,
                    "text": "missing token",
                    "msg": "Authorization header is missing or in the wrong format"
                  }
                ]
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotSupportedError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1000,
                    "text": "internal error",
                    "msg": "The server encountered an error"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "oAuth2ClientCredentials": [
              "console_ro",
              "api_ro"
            ]
          }
        ]
      }
    },
    "/campaign/": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Creates a new campaign for the user",
        "description": "Creates a new campaign for the user. If successful, it returns an object representing the campaign, with default values on certain fields, if not provided. A minimum payload is an empty JSON, as none of the fields are mandatory.",
        "operationId": "postCampaignV2",
        "requestBody": {
          "content": {
            "application/sellside.campaign-v2+json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign created",
            "headers": {
              "Oauth-Scope": {
                "description": "Oauth scopes that are available with the supplied token",
                "schema": {
                  "type": "string",
                  "example": "api_ro api_rw"
                }
              },
              "Oauth-Scope-Required": {
                "description": "The required permission for this particular call",
                "schema": {
                  "type": "string",
                  "example": "post_campaign"
                }
              }
            },
            "content": {
              "application/sellside.campaign-v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignV2"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "content-type: application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  },
                  "example":
                    [
                      {
                        "code": 2034,
                        "text": "campaign already exists",
                        "msg": "Campaign can only be created once for the same user",
                        "field": "campaign",
                        "arg": ""
                      }
                    ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1009,
                    "text": "missing token",
                    "msg": "Authorization header is missing or in the wrong format"
                  }
                ]
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotSupportedError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1000,
                    "text": "internal error",
                    "msg": "The server encountered an error"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "oAuth2ClientCredentials": [
              "console_rw",
              "api_rw"
            ]
          }
        ]
      }
    },
    "/campaign/byVendor/{vendorId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Returns a single campaign with the given vendorId.",
        "description": "If the campaign does not exist or does not belong to the user the server returns 404 Not Found. If the vendorId is bigger than 64 characters the server returns 400 Bad Request. The vendorId is unique for a user; It is not possible for a single user to create multiple campaigns with the same vendorId (even if other campaigns are in status DELETED)",
        "operationId": "getCampaignByVendorId",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "description": "Case-insensitive filter for a keyword in the title; will include only ads which contain the given keyword in their title.",
            "schema": {
              "type": "string",
              "example": "my-christmas-campaign-2020"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Oauth-Scope": {
                "description": "Oauth scopes that are available with the supplied token",
                "schema": {
                  "type": "string",
                  "example": "api_ro api_rw"
                }
              },
              "Oauth-Scope-Required": {
                "description": "The required permission for this particular call",
                "schema": {
                  "type": "string",
                  "example": "post_campaign"
                }
              }
            },
            "content": {
              "application/sellside.campaign-v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1009,
                    "text": "missing token",
                    "msg": "Authorization header is missing or in the wrong format"
                  }
                ]
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotSupportedError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/sellside.error-v1+json; charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiResponseError"
                  }
                },
                "example": [
                  {
                    "code": 1000,
                    "text": "internal error",
                    "msg": "The server encountered an error"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [],
            "oAuth2ClientCredentials": [
              "console_ro",
              "api_ro"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Image": {
        "description": "When an ad is created or updated the caller provides the images as a list of image objects which contain only the source url. The images are then downloaded by iCAS and the server adds additional fields which describe the status of the download. The images will be shown in the order they are provided. The first image is shown in search results and it is the main image on the item page.",
        "properties": {
          "src": {
            "type": "string",
            "description": "The source URL of the image, where it will be downloaded from",
            "format": "base64url",
            "example": "https://example.nl/8228771/wit-met-stiksel.jpg",
            "required": true
          },
          "status": {
            "type": "string",
            "enum": [
              "OK",
              "PENDING",
              "ERROR"
            ],
            "readOnly": true,
            "example": "OK",
            "description": "The server adds a status field indicating the status of the download. The status is either OK (image was successfully downloaded), PENDING (image is scheduled to be downloaded) or ERROR if the image was not found or invalid."
          },
          "dateLastUpdated": {
            "type": "string",
            "format": "dateTime",
            "example": "2018-07-26T14:56:51Z",
            "description": "The ISO 8601 UTC date and time the ad was last updated.",
            "readOnly": true
          },
          "links": {
            "type": "object",
            "description": "A map of image URLs for different dimensions of the same image.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "50x70": "//i.ebay.com/image23434_abc.jpg",
              "120x180": "//i.marktplaats.nl/image23434_def.jpg"
            }
          }
        }
      },
      "AttributeValue": {
        "properties": {
          "schema": {
            "oneOf": [
              {
                "type": "string",
                "example": "zwart",
                "maxLength": 512,
                "description": "A single string value."
              },
              {
                "type": "number",
                "example": 6,
                "description": "A single number value."
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "zwart",
                      "maxLength": 512,
                      "description": "A single string value."
                    },
                    {
                      "type": "number",
                      "example": 6,
                      "description": "A single number value."
                    }
                  ]
                },
                "description": "A list of string or number values. The JSON representation of the value of a list attribute must not exceed 512 characters.",
                "maxLength": 512,
                "example": [
                  "zwart",
                  "groen"
                ]
              }
            ]
          }
        }
      },
      "UserAttribute": {
        "externalDocs": {
          "url": "http://ecg-icas.github.io/icas/doc/next/attributes.html#user-defined-attributes"
        },
        "type": "object",
        "description": "User-defined attributes are the actual names and values provided by the user for a given ad. They contain any valid key/value combination as described below and are not limited by the category attributes. This means the user can determine not only the value of the attribute, but also the name of the key.",
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 32,
            "example": "color",
            "required": true
          },
          "label": {
            "type": "string",
            "maxLength": 32,
            "example": "kleur",
            "required": true,
            "description": "The label can contain the same value as the key."
          },
          "locale": {
            "type": "string",
            "format": "locale",
            "description": "Specifies the language for the label and the value. Must be a valid locale string.",
            "example": "en_US",
            "required": true
          },
          "type": {
            "description": "The type of the attribute. Can be one of STRING - a single string value, NUMBER - a single number value, or LIST - a list of string or number values",
            "type": "string",
            "enum": [
              "STRING",
              "NUMBER",
              "LIST"
            ],
            "example": "LIST",
            "required": true
          },
          "value": {
            "$ref": "#/components/schemas/AttributeValue"
          }
        }
      },
      "ShippingOption": {
        "type": "object",
        "example": {
          "type": "PICKUP",
          "pickupLocation": "1097DN"
        },
        "properties": {
          "type": {
            "required": true,
            "type": "string",
            "enum": [
              "SHIP",
              "PICKUP"
            ],
            "description": "SHIP means the item can be delivered to the buyer in the provided time and for the provided cost. PICKUP means the item can be picked up at the provided location.",
            "example": "SHIP"
          },
          "cost": {
            "type": "integer",
            "format": "int64",
            "description": "Cost of shipping in cents. Only valid when type is SHIP.",
            "minimum": 0,
            "example": 15000
          },
          "time": {
            "type": "string",
            "format": "duration",
            "description": "Time it takes to deliver the ad. Only valid when type is SHIP.",
            "enum": [
              "1d",
              "2d-5d",
              "6d-10d"
            ],
            "example": "2d-5d"
          },
          "pickupLocation": {
            "type": "string",
            "description": "Pick up location of the item. Mandatory when the type is PICKUP",
            "example": "3541CB"
          }
        }
      },
      "AdStatus": {
        "type": "string",
        "required": true,
        "description": "The current ad status. The user can set only one of the user controlled states ACTIVE, PAUSED or DELETED.",
        "enum": [
          "ACTIVE",
          "PAUSED",
          "BUDGET_REACHED",
          "DAILY_LIMIT_REACHED",
          "DELETED",
          "DELETED_BY_CS",
          "SUSPENDED_BY_CS"
        ],
        "example": "ACTIVE"
      },
      "OrderBy": {
        "type": "string",
        "description": "Orders the result set by the given field. Default value is DATE_CREATED.",
        "enum": [
          "DATE_CREATED",
          "DATE_LAST_UPDATED",
          "STATUS",
          "CLICKS",
          "TITLE",
          "CPC",
          "SPENT",
          "REMAINING_BUDGET"
        ],
        "example": "DATE_CREATED",
        "default": "DATE_CREATED"
      },
      "AdV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "required": true,
            "example": 1235,
            "minimum": 0,
            "description": "Unique reference to the iCAS ad, needs to be omitted in a POST or PUT action."
          },
          "title": {
            "type": "string",
            "description": "Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.",
            "required": true,
            "example": "Buy the new iPhone here"
          },
          "description": {
            "type": "string",
            "description": "The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.",
            "required": true,
            "example": "Extra sale, buy the new iPhone today and save!"
          },
          "categoryId": {
            "description": "The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.",
            "type": "integer",
            "format": "int64",
            "required": true,
            "example": 2353465,
            "minimum": 0
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "externalId": {
            "type": "string",
            "maxLength": 64,
            "description": "Any non-empty string with a maximum length of 64 characters. When fetching an existing ad which does not have an externalId, the field is empty or omitted.",
            "example": "OURSHOP-1423453-34",
            "deprecated": true
          },
          "status": {
            "$ref": "#/components/schemas/AdStatus"
          },
          "priceType": {
            "type": "string",
            "required": true,
            "enum": [
              "BIDDING",
              "BIDDING_FROM",
              "FIXED_PRICE",
              "FREE",
              "NEGOTIABLE",
              "SEE_DESCRIPTION",
              "SWAP",
              "CREDIBLE_BID",
              "ON_DEMAND"
            ],
            "description": "Each ad has a price type which determines the type of transaction the seller would like to perform. Must be a valid price type identifier from the list.",
            "example": "FIXED_PRICE"
          },
          "currency": {
            "type": "string",
            "description": "The 3 letter ISO-4217 currency code.",
            "example": "EUR",
            "readOnly": true,
            "format": "iso-4217"
          },
          "priceUnit": {
            "type": "string",
            "description": "Must be a valid price unit identifier from the list of available price units of the category",
            "example": "per_sqm"
          },
          "price": {
            "type": "integer",
            "format": "int64",
            "description": "The meaning of the value depends on priceType. If it is FIXED_PRICE or BIDDING_FROM then price has to be greater than 0. ",
            "maximum": 100000000
          },
          "cpc": {
            "type": "integer",
            "format": "int64",
            "description": "The cost per click as defined by the seller. The minimum and maximum values depend on the category.",
            "required": true,
            "example": 15,
            "minimum": 1
          },
          "totalBudget": {
            "type": "integer",
            "format": "int64",
            "description": "The total budget for the ad, in cents. The minimum and maximum values depend on the category. When an ad is updated this value cannot be lower than the spentBudget. If the total budget is not returned with the ad, it means there is an unlimited total budget.",
            "example": 5000
          },
          "dailyBudget": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "The daily budget for the ad. When this value is reached the ad will be paused for the rest of the day. The minimum value depends on the category. Maximum value cannot be higher than the totalBudget",
            "example": 50000
          },
          "spentBudget": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The total amount of the budget that has been used so far, in cents."
          },
          "dailySpent": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The budget spent for the ad since midnight, in cents. Only provided when the dailyBudget is set and larger than 0."
          },
          "salutation": {
            "type": "string",
            "enum": [
              "COMPANY",
              "MALE",
              "FEMALE",
              "FAMILY",
              "UNKNOWN"
            ],
            "description": "The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY",
            "example": "COMPANY",
            "required": true
          },
          "sellerName": {
            "type": "string",
            "maxLength": 60,
            "required": true,
            "example": "Mr. Smith",
            "description": "Display name of the seller."
          },
          "phoneNumber": {
            "maxLength": 32,
            "description": "The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.",
            "example": "+31207894561"
          },
          "allowContactByEmail": {
            "type": "boolean",
            "example": true,
            "description": "Flag for allowing emails to be sent to the advertiser."
          },
          "allowPayPal": {
            "deprecated": true,
            "description": "Flag for allowing PayPal as a payment option.",
            "example": false
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the ad was created.",
            "readOnly": true,
            "example": "2019-04-18T13:55:10Z"
          },
          "dateLastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the ad was last updated.",
            "readOnly": true,
            "example": "2020-08-05T07:49:14Z"
          },
          "dateDeleted": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.",
            "readOnly": true,
            "example": "2020-08-05T07:49:14Z"
          },
          "postcode": {
            "type": "string",
            "description": "Must be an non empty string.",
            "example": "1703GB",
            "maxLength": 6,
            "required": true
          },
          "regionId": {
            "type": "integer",
            "format": "int64",
            "description": "The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.",
            "example": 10034535
          },
          "pageNumber": {
            "type": "integer",
            "format": "int",
            "description": "Page number on which this ad is shown. Page number is highly volatile and might change very quickly depending on the performance of the ad.",
            "readOnly": true,
            "example": 2
          },
          "suggestedCpcForPageOne": {
            "description": "Suggested CPC value in (euro/dollar) cents for this ad to be shown on page one. This value is very volatile and might change very quickly depending on the performance of the ad.",
            "type": "integer",
            "format": "int64",
            "example": 15,
            "readOnly": true
          },
          "links": {
            "type": "object",
            "description": "Provides various hypermedia URLs to access linked resources. Also contains a self link, which points to the current resource.",
            "properties": {
              "self": {
                "type": "string",
                "format": "url",
                "example": "/api/sellside/ad/1235",
                "description": "A self link which points to the current resource.",
                "maxLength": 2048,
                "readOnly": true
              },
              "category": {
                "type": "integer",
                "format": "int64",
                "description": "The resource location for the category that this ad belongs to.",
                "example": "/api/sellside/category/2353465",
                "readOnly": true,
                "maxLength": 2048
              },
              "url": {
                "type": "string",
                "format": "url",
                "maxLength": 2048,
                "description": "An external URL that is shown on the ad page. This must be a valid http(s) url.",
                "example": "http://wwww.company.com/product"
              },
              "displayUrl": {
                "description": "The text/url that will be displayed instead of the url in links.url.",
                "type": "string",
                "maxLength": 256,
                "example": "Click here to buy this product"
              }
            }
          },
          "vendorId": {
            "type": "string",
            "description": "Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.",
            "example": "vendor1245-1234"
          },
          "attributes": {
            "type": "array",
            "description": "An optional list of user-defined attributes",
            "items": {
              "$ref": "#/components/schemas/UserAttribute"
            }
          },
          "shippingOptions": {
            "example": [
              {
                "type": "SHIP",
                "cost": 0,
                "time": "2d-5d"
              },
              {
                "type": "PICKUP",
                "pickupLocation": "1097DN"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingOption"
            },
            "description": "A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category."
          }
        }
      },
      "AdV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "required": true,
            "example": 1235,
            "minimum": 0,
            "description": "Unique reference to the iCAS ad, needs to be omitted in a POST action."
          },
          "title": {
            "type": "string",
            "description": "Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.",
            "required": true,
            "example": "Buy the new iPhone here"
          },
          "description": {
            "type": "string",
            "description": "The description field of the ad. Any string, with minimum and maximum length determined by the category. URLs are not allowed as part of the title.",
            "required": true,
            "example": "Extra sale, buy the new iPhone today and save!"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "categoryId": {
            "description": "The category in which the ad is placed. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad.",
            "type": "integer",
            "format": "int64",
            "required": true,
            "example": 2353465,
            "minimum": 0
          },
          "externalId": {
            "type": "string",
            "maxLength": 64,
            "description": "Any non-empty string with a maximum length of 64 characters. When fetching an existing ad which does not have an externalId, the field is empty or omitted.",
            "example": "OURSHOP-1423453-34",
            "deprecated": true
          },
          "status": {
            "$ref": "#/components/schemas/AdStatus"
          },
          "statusReasons": {
            "type": "array",
            "description": "Currently used to indicate the reason why a certain ad might be set to a certain status by our system. This could be due to, for example, an action (like new website domain approval) pending from the user, which is a mechanism used to prevent account takeovers from setting the website URL to a malicious one.",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "example": [
              "DOMAIN_PENDING"
            ]
          },
          "priceType": {
            "type": "string",
            "required": true,
            "enum": [
              "BIDDING",
              "BIDDING_FROM",
              "FIXED_PRICE",
              "FREE",
              "NEGOTIABLE",
              "SEE_DESCRIPTION",
              "SWAP",
              "CREDIBLE_BID",
              "ON_DEMAND"
            ],
            "description": "Each ad has a price type which determines the type of transaction the seller would like to perform. Must be a valid price type identifier from the list.",
            "example": "FIXED_PRICE"
          },
          "currency": {
            "type": "string",
            "description": "The 3 letter ISO-4217 currency code.",
            "example": "EUR",
            "readOnly": true,
            "format": "iso-4217"
          },
          "priceUnit": {
            "type": "string",
            "description": "Must be a valid price unit identifier from the list of available price units of the category",
            "example": "per_sqm"
          },
          "price": {
            "type": "integer",
            "format": "int64",
            "description": "The meaning of the value depends on priceType. If it is FIXED_PRICE or BIDDING_FROM then price has to be greater than 0. ",
            "maximum": 100000000
          },
          "cpc": {
            "type": "integer",
            "format": "int64",
            "description": "The cost per click as defined by the seller. The minimum and maximum values depend on the category.",
            "required": true,
            "example": 15,
            "minimum": 1
          },
          "totalBudget": {
            "type": "integer",
            "format": "int64",
            "description": "The total budget for the ad, in cents. The minimum and maximum values depend on the category. When an ad is updated this value cannot be lower than the spentBudget. If the total budget is not returned with the ad, it means there is an unlimited total budget.",
            "example": 5000
          },
          "dailyBudget": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "The daily budget for the ad,in cents. When this value is reached the ad will be paused for the rest of the day. The minimum value depends on the category. Maximum value cannot be higher than the totalBudget",
            "example": 50000
          },
          "spentBudget": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The total amount of the budget that has been used so far, in cents."
          },
          "dailySpent": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "The budget spent for the ad since midnight, in cents. Only provided when the dailyBudget is set and larger than 0."
          },
          "salutation": {
            "type": "string",
            "enum": [
              "COMPANY",
              "MALE",
              "FEMALE",
              "FAMILY",
              "UNKNOWN"
            ],
            "description": "The salutation as used in emails. Must be a valid salutation identifier from MALE, FEMALE, COMPANY or FAMILY",
            "example": "COMPANY",
            "required": true
          },
          "sellerName": {
            "type": "string",
            "maxLength": 60,
            "required": true,
            "example": "Mr. Smith",
            "description": "Display name of the seller."
          },
          "phoneNumber": {
            "maxLength": 32,
            "description": "The phone number of the advertiser as international phone number format, or as a local phone number. 0900 and 0800 numbers are not allowed.",
            "example": "+31207894561"
          },
          "allowContactByEmail": {
            "type": "boolean",
            "example": true,
            "description": "Flag for allowing emails to be sent to the advertiser."
          },
          "allowPayPal": {
            "deprecated": true,
            "description": "Flag for allowing PayPal as a payment option.",
            "example": false
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the ad was created.",
            "readOnly": true,
            "example": "2019-04-18T13:55:10Z"
          },
          "dateLastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the ad was last updated.",
            "readOnly": true,
            "example": "2020-08-05T07:49:14Z"
          },
          "dateDeleted": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the ad was deleted. Omitted if the ad is not deleted.",
            "readOnly": true,
            "example": "2020-08-05T07:49:14Z"
          },
          "postcode": {
            "type": "string",
            "description": "Must be an non empty string.",
            "example": "1703GB",
            "maxLength": 6,
            "required": true
          },
          "regionId": {
            "type": "integer",
            "format": "int64",
            "description": "The region in which the ad is placed. A long value from the region tree. Must be the id of a leaf region. Each ad belongs to one and only one region and region of an ad cannot be updated. This field can only set once during creation of an ad. This field is mandatory if the region field of category configuration is MANDATORY and optional if the region field is OPTIONAL. This field must be omitted if the region field of category configuration is DISABLED.",
            "example": 10034535
          },
          "pageNumber": {
            "type": "integer",
            "format": "int",
            "description": "Page number on which this ad is shown. Page number is highly volatile and might change very quickly depending on the performance of the ad.",
            "readOnly": true,
            "example": 2
          },
          "suggestedCpcForPageOne": {
            "description": "Suggested CPC value in (euro/dollar) cents for this ad to be shown on page one. This value is very volatile and might change very quickly depending on the performance of the ad.",
            "type": "integer",
            "format": "int64",
            "example": 15,
            "readOnly": true
          },
          "links": {
            "type": "object",
            "description": "Provides various hypermedia URLs to access linked resources. Also contains a self link, which points to the current resource.",
            "properties": {
              "self": {
                "type": "string",
                "format": "url",
                "example": "/api/sellside/ad/1235",
                "description": "A self link which points to the current resource.",
                "maxLength": 2048,
                "readOnly": true
              },
              "category": {
                "type": "integer",
                "format": "int64",
                "description": "The resource location for the category that this ad belongs to.",
                "example": "/api/sellside/category/2353465",
                "readOnly": true,
                "maxLength": 2048
              },
              "url": {
                "type": "string",
                "format": "url",
                "maxLength": 2048,
                "description": "An external URL that is shown on the ad page. This must be a valid http(s) url.",
                "example": "http://wwww.company.com/product"
              },
              "displayUrl": {
                "description": "The text/url that will be displayed instead of the url in links.url.",
                "type": "string",
                "maxLength": 256,
                "example": "Click here to buy this product"
              }
            }
          },
          "vendorId": {
            "type": "string",
            "description": "Any non-empty string, unique per customer. Can either be set when creating an ad or when updating an existing ad. However, once set, it can no longer be modified. When fetching an existing ad which does not have a vendorId, the field is omitted.",
            "example": "vendor1245-1234"
          },
          "attributes": {
            "type": "array",
            "description": "An optional list of user-defined attributes",
            "items": {
              "$ref": "#/components/schemas/UserAttribute"
            }
          },
          "shippingOptions": {
            "example": [
              {
                "type": "SHIP",
                "cost": 0,
                "time": "2d-5d"
              },
              {
                "type": "PICKUP",
                "pickupLocation": "1097DN"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingOption"
            },
            "description": "A list of shipping options available for an ad. Ads can contain maximum one shipping option per shipping option type. Whether shipping options are disabled/optional/mandatory for an ad is configured per category."
          }
        }
      },
      "AdList": {
        "type": "object",
        "properties": {
          "ads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdV3"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "readOnly": true,
            "example": 1
          }
        }
      },
      "CampaignStatus": {
        "type": "string",
        "required": true,
        "description": "The current campaign status. The user can set only one of the user controlled states ACTIVE, PAUSED or DELETED.",
        "enum": [
          "ACTIVE",
          "PAUSED",
          "BUDGET_REACHED",
          "DELETED"
        ],
        "example": "ACTIVE"
      },
      "DailyBudget": {
        "type": "object",
        "description": "The maximum amount (in cents) that a campaign can spend per day (limit), and the current-day spent. The spent amount value will be reset at midnight every day. If not set, the limit will be shown as -1 (Unlimited).",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int64",
            "example": 120,
            "description": "The daily budget limit, in cents.",
            "required": true
          },
          "spent": {
            "type": "integer",
            "format": "int64",
            "example": 120,
            "description": "The current spent, in cents.",
            "readOnly": true
          }
        },
        "example": {
          "limit": 120,
          "spent": 20
        }
      },
      "MonthlyBudget": {
        "type": "object",
        "description": "The maximum amount (in cents) that a campaign can spend per calendar month (limit), and the current-month spent. The spent amount value will be reset at midnight every 1st of the month. If not set, the limit will be shown as -1 (Unlimited).",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int64",
            "example": 120,
            "description": "The monthly budget limit, in cents.",
            "required": true
          },
          "spent": {
            "type": "integer",
            "format": "int64",
            "example": 120,
            "description": "The current spent, in cents.",
            "readOnly": true
          }
        },
        "example": {
          "limit": 1000,
          "spent": 30
        }
      },
      "TotalBudget": {
        "type": "object",
        "description": "The maximum amount (in cents) that a campaign can spend in its lifetime, and the current total spent. The spent value will never be reset. If not set, the limit will be shown as -1 (Unlimited).",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int64",
            "example": 120,
            "description": "The total budget limit, in cents.",
            "required": true
          },
          "spent": {
            "type": "integer",
            "format": "int64",
            "example": 120,
            "description": "The total spent, in cents.",
            "readOnly": true
          }
        },
        "example": {
          "limit": -1,
          "spent": 30
        }
      },
      "CampaignBudgets": {
        "type": "object",
        "description": "An object containing the current budget limits and spent for this campaign. The unit for limit and spent is cents. The default limit values are set to -1 (Unlimited). If the campaign is DELETED, no budgets are shown.",
        "properties": {
          "daily": {
            "$ref": "#/components/schemas/DailyBudget"
          },
          "monthly": {
            "$ref": "#/components/schemas/MonthlyBudget"
          },
          "total": {
            "$ref": "#/components/schemas/TotalBudget"
          }
        },
        "example": {
          "daily": {
            "limit": 120,
            "spent": 20
          },
          "monthly": {
            "limit": 1000,
            "spent": 30
          },
          "total": {
            "limit": -1,
            "spent": 30
          }
        }
      },
      "GeoTargeting": {
        "description": "Geo targeting allows you to specify one or more (circular) areas in the targeting criteria of a campaign to have the ads of that campaign only be shown to buyers located in any of the geographical areas specified.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "lat": {
              "type": "number",
              "format": "double",
              "example": 1.2345,
              "description": "Latitude of the center-point of the circular area for geo-targeting",
              "minimum": -90,
              "maximum": 90
            },
            "lon": {
              "type": "number",
              "format": "double",
              "example": 123.456,
              "description": "Longitude of the center-point of the circular area for geo-targeting",
              "minimum": -180,
              "maximum": 180
            },
            "radius": {
              "description": "Radius (in km) of the circular area for geo-targeting",
              "type": "integer",
              "format": "int64",
              "example": 10
            }
          }
        }
      },
      "RegionTargeting": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "int64"
        },
        "description": "A list of valid regionIds from the Regions taxonomy. Default is empty array or [0], either of which implies nationwide targeting (no targeting restrictions).",
        "example": [
          12300,
          1000134
        ]
      },
      "CampaignV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1235,
            "minimum": 0,
            "description": "Unique reference to the iCAS campaign, needs to be omitted in a POST action."
          },
          "title": {
            "type": "string",
            "example": "My awesome campaign",
            "description": "A description of your campaign. Only visible on your dashboard, it will never be shown to buyers.",
            "maxLength": 255
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "The ISO 8601 UTC date and time the campaign was created.",
            "readOnly": true,
            "example": "2019-04-18T13:55:10Z"
          },
          "dateLastUpdated": {
            "type": "string",
            "format": "dateTime",
            "example": "2018-07-26T14:56:51Z",
            "readOnly": true,
            "description": "The ISO 8601 UTC date and time the campaign was last updated."
          },
          "status": {
            "$ref": "#/components/schemas/CampaignStatus"
          },
          "vendorId": {
            "type": "string",
            "description": "Any non-empty string, unique per customer. Can either be set when creating a campaign or when updating an existing one. However, once set, it can no longer be modified. When fetching an existing campaign which does not have a vendorId, the field is omitted.",
            "example": "vendor1245-1234"
          },
          "budgets": {
            "$ref": "#/components/schemas/CampaignBudgets"
          },
          "targeting": {
            "description": "A Campaign Targeting Object, containing the targeting settings for this campaign. The default value is an empty targeting, indicating that the targeting is nationwide (no limitations). Geo-circles and regions cannot and should not be used in combination on the same campaign. This is currently not supported.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/GeoTargeting"
              },
              {
                "$ref": "#/components/schemas/RegionTargeting"
              }
            ]
          }
        }
      },
      "NotSupportedError": {
        "type": "string",
        "example": "Response type text/xml is not supported"
      },
      "ApiResponseError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 1009
          },
          "text": {
            "type": "string",
            "example": "internal error"
          },
          "msg": {
            "type": "string",
            "example": "The server encountered an error"
          }
        },
        "example": {
          "code": "1000",
          "text": "internal error",
          "msg": "The server encountered an error"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "https://www.api-test.dev/"
      },
      "oAuth2ClientCredentials": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/accounts/oauth/authorize",
            "refreshUrl": "/accounts/oauth/token",
            "tokenUrl": "/accounts/oauth/token",
            "scopes": {
              "api_ro": "Grants API read access",
              "api_rw": "Grants API write access",
              "console_ro": "Grants Console read access",
              "console_rw": "Grants Console write access"
            }
          }
        }
      }
    }
  }
}

